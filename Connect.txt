public boolean connectToMailBox(final String btAddressTobeConnected) {
        // This block should be moved to initialization method.
	/*if (mBluetoothManager == null) {
		mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
		if (mBluetoothManager == null) {
			Log.e(TAG, "Unable to initialize BluetoothManager.");
			return false;
		}
	}if(mBluetoothAdapter == null) {
		mBluetoothAdapter = mBluetoothManager.getAdapter();
	}*/

	if (mBluetoothAdapter == null || btAddressTobeConnected == null) {
		Log.w(TAG, "BluetoothAdapter not initialized or address is unspecified");
		return false;
	}
	try {
		final BluetoothDevice btDevice = mBluetoothAdapter.getRemoteDevice(btAddressTobeConnected);
	}catch(IllegalArgumentException e){
		Log.d(TAG, "Invalid BT Address");
	}
	if (device == null) {
		Log.w(TAG, "Device not found.  Unable to connect.");
		return false;
	}
	mBluetoothGatt = btDevice.connectGatt(this, false, mBTGattCB);
	Log.d(TAG, "Connection request is initiated.");
	mBTDeviceAddress = btAddressTobeConnected;
	mBTConnectionState = STATE_CONNECTING;
	return true;
}

// Implement the necessary callbacks to meet the current requirement.
private final BluetoothGattCallback bleGattCallback = new BluetoothGattCallback() {

	@Override
	public void onConnectionStateChange(BluetoothGatt btGatt, int status, int newState) {
		if (newState == BluetoothProfile.STATE_CONNECTED) {
			mBTConnectionState = STATE_CONNECTED;
			Log.i(TAG, "Successfully connected to GATT");
			Log.i(TAG, "Initiate Services discovery-->" +
					mBluetoothGatt.discoverServices());
		} else if (newState == BluetoothProfile.STATE_DISCONNECTED) {
			mBTConnectionState = STATE_DISCONNECTED;
			Log.i(TAG, "GATT Disconnected");
		}
	}
	@Override
	public void onServicesDiscovered(BluetoothGatt btGatt, int status) {
		if (status == BluetoothGatt.GATT_SUCCESS) {
			Log.i(TAG, "Services discovery succeeded");
			mBluetoothGatt.getServices();    // It is not needed here, it can be moved to a On Demand API. Make sure to call this API only after the
			// services discovery is completed.
		} else {
			Log.w(TAG, "Services discovery Failed: " + status);
		}
	}
	@Override
        public void onCharacteristicRead(BluetoothGatt btGatt, BluetoothGattCharacteristic characteristic, int status) {
            super.onCharacteristicRead(btGatt, characteristic, status);
            Log.d("onCharacteristicRead---> status--->"+status);
        }

        @Override
        public void onCharacteristicWrite(BluetoothGatt btGatt, BluetoothGattCharacteristic characteristic, int status) {
            super.onCharacteristicWrite(btGatt, characteristic, status);
            if(status != BluetoothGatt.GATT_SUCCESS){
                Log.d("onCharacteristicWrite", "Failed to write in previous request, Try again");
                mBluetoothGatt.writeCharacteristic(characteristic);
            }else {
                Log.i(TAG,"characteristic written [" + status + "]");
                if (characteristic.getUuid().equals(Config.BLE_MAILBOX_LOCK_UNLOCK_CHARACTERSTIC)) {
                    mCurrentLockState = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8,0);
                    switch(mCurrentLockState){
                        case 0: {
                            Log.i(TAG,"Mailbox is Unlocked");
                            break;
                        }
                        case 1: {
                            Log.i(TAG,"Mailbox is Locked");
                            break;
                        }
                    }
                    //Disable notifications for the changes in the Config.TOKEN_ID Characterstic as the current Lock/Unlock
                    // request life cycle is ended.
                    BluetoothGattCharacteristic characteristicTokenId = bleServiceMailbox.getCharacteristic(Bitmap.Config.TOKEN_ID_CHARACTERSTIC);
                    mBluetoothGatt.setCharacteristicNotification(characteristicTokenId, false);
                    BluetoothGattDescriptor descriptor = characteristic.getDescriptor(
                            UUID.fromString(Bitmap.Config.TOKEN_ID_CHARACTERISTIC_DESCRIPTOR));
                    descriptor.setValue(BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE);
                }
            }
        }

        @Override
        public void onCharacteristicChanged(BluetoothGatt btGatt, BluetoothGattCharacteristic characteristic) {
            super.onCharacteristicChanged(btGatt, characteristic);
            if (characteristic.getUuid().equals(Bitmap.Config.TOKEN_ID_CHARACTERSTIC)) {
                mTokenID = characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT32, 0);
                if (mTokenID > 0) {
                    UUID tokenUUID = getHttpService().getToken(mTokenID); // Get the token associated to this tokenID from the Cloud. This is a HTTP Get request.
                    authenticate(mTokenID, token.toString());
                } else {
                    lockUnlockMailBox(mUserReqLock);  // Didn't receive valid token, so resend the lock or unlock request.
                }
            }
        }
};
